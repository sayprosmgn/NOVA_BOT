from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import pickle
import os
from config import API_ID, API_HASH, BOT_TOKEN, MAIN_CHANNEL

USERS_FILE = "users.pkl"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "rb") as f:
            return pickle.load(f)
    return set()

def save_users(data):
    with open(USERS_FILE, "wb") as f:
        pickle.dump(data, f)

users = load_users()
app = Client("promo_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

def add_user(user_id):
    if user_id not in users:
        users.add(user_id)
        save_users(users)

def get_invite_link(user_id=None):
    base = f"https://t.me/{MAIN_CHANNEL.lstrip('@')}"
    # –° –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    if user_id:
        return f"{base}?start={user_id}"
    return base

@app.on_message(filters.command("start") & filters.private)
def start(client, message: Message):
    user_id = message.from_user.id
    add_user(user_id)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ—Å—Ç—è–º!", url=get_invite_link())],
        [InlineKeyboardButton("üîÅ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref")]
    ])
    message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ-–±–æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {MAIN_CHANNEL}.\n\n"
        "–•–æ—á–µ—à—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –º–∏—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑ —Å–ø–∞–º–∞ –∏ —Ä–µ–∫–ª–∞–º—ã? –ñ–º–∏ ¬´–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è¬ª!\n"
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∞—Å –¥—Ä—É–∑—å—è–º ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–µ—Å—è—Ü–∞! üëá",
        reply_markup=kb
    )

@app.on_callback_query(filters.regex("get_ref"))
def ref_link(client, callback_query):
    user_id = callback_query.from_user.id
    link = get_invite_link(user_id)
    callback_query.message.reply(
        f"–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:\n\n{link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî +1 —à–∞–Ω—Å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –º–µ—Å—è—Ü–∞! –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö."
    )
    callback_query.answer("–°—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)

@app.on_message(filters.command("stats") & filters.private)
def stats(client, message: Message):
    count = len(users)
    message.reply(f"–ë–æ—Ç—É —É–∂–µ –¥–æ–≤–µ—Ä—è—é—Ç {count} —á–µ–ª–æ–≤–µ–∫(–∞)! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞—Å ü§ó")

if __name__ == "__main__":
    print("–ü—Ä–æ–º–æ-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run()
